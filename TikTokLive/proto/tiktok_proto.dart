//SEGMENT 1
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// sources: data.proto, enums.proto, webcast.proto
// plugin: python-betterproto
// This file has been @generated

import 'package:built_collection/built_collection.dart';
import 'package:better_enum/better_enum.dart';

enum AuditStatus {
  AUDITSTATUSUNKNOWN,
  AUDITSTATUSPASS,
  AUDITSTATUSFAILED,
  AUDITSTATUSREVIEWING,
  AUDITSTATUSFORBIDDEN,
}

enum EmoteType {
  EMOTETYPENORMAL,
  EMOTETYPEWITHSTICKER,
}

enum ContentSource {
  CONTENTSOURCEUNKNOWN,
  CONTENTSOURCENORMAL,
  CONTENTSOURCECAMERA,
}

enum EmotePrivateType {
  NORMAL,
  SUB_WAVE,
}

enum TextType {
  DISPLAY_TEXT,
  CONTENT,
}

enum LinkmicApplierSortSetting {
  NONE,
  BY_GIFT_SCORE,
}

enum HashtagNamespace {
  GLOBAL,
  GAMING,
}

enum AgreeStatus {
  AGREE_UNKNOWN,
  AGREE,
  REJECT,
}

enum KickoutReason {
  UNKNOWN,
  FIRST_FRAME_TIMEOUT,
  BY_HOST,
  RTC_LOST_CONNECTION,
  BY_PUNISH,
  BY_ADMIN,
  HOST_REMOVE_ALL_GUESTS,
}

enum GroupStatus {
  UNKNOWN,
  WAITING,
  LINKED,
}

enum BusinessCase {
  BUSINESS_NOT_SET,
  APPLY_BIZ_CONTENT,
  INVITE_BIZ_CONTENT,
  REPLY_BIZ_CONTENT,
  PERMIT_BIZ_CONTENT,
  JOIN_DIRECT_BIZ_CONTENT,
  KICK_OUT_BIZ_CONTENT,
  LIST_CHANGE_BIZ_CONTENT,
  MULTI_LIVE_CONTENT,
  COHOST_CONTENT,
}

enum ReplyStatus {
  UNKNOWN,
  AGREE,
  REFUSE_PERSONALLY,
  REFUSE_TYPE_NOT_SUPPORT,
  REFUSE_PROCESSING_INVITATION,
  REFUSE_BY_TIMEOUT,
  REFUSE_EXCEPTION,
  REFUSE_SYSTEM_NOT_SUPPORTED,
  REFUSE_SUBTYPE_DIFFERENCE,
  REFUSE_IN_MICROOM,
  REFUSE_NOT_LOAD_PLUGIN,
  REFUSE_IN_MULTI_GUEST,
  REFUSE_PAUSE_LIVE,
  REFUSE_OPEN_CAMERA_DIALOG_SHOWING,
  REFUSE_DRAW_GUESSING,
  REFUSE_RANDOM_MATCHING,
  REFUSE_IN_MATCH_PROCESSING,
  REFUSE_IN_MICROOM_FOR_MULTI_COHOST,
  REFUSE_COHOST_FINISHED,
  REFUSE_NOT_CONNECTED,
  REFUSE_LINKMIC_FULL,
  REFUSE_ARC_INCOMPATIBLE,
  REFUSE_PROCESSING_OTHER_INVITE,
  REFUSE_PROCESSING_OTHER_APPLY,
  REFUSE_IN_ANCHOR_COHOST,
  REFUSE_TOPIC_PAIRING,
}
//SEGMENT 2
enum ReplyStatus {
  // Previous enum values...

  REFUSE_LINKMIC_FULL,
  REFUSE_ARC_INCOMPATIBLE,
  REFUSE_PROCESSING_OTHER_INVITE,
  REFUSE_PROCESSING_OTHER_APPLY,
  REFUSE_IN_ANCHOR_COHOST,
  REFUSE_TOPIC_PAIRING,
}

enum SubscribeType {
  SUBSCRIBETYPE_ONCE,
  SUBSCRIBETYPE_AUTO,
  SUBSCRIBETYPE_DEFAULT,
}

enum OldSubscribeStatus {
  OLDSUBSCRIBESTATUS_FIRST,
  OLDSUBSCRIBESTATUS_RESUB,
  OLDSUBSCRIBESTATUS_SUBINGRACEPERIOD,
  OLDSUBSCRIBESTATUS_SUBNOTINGRACEPERIOD,
  OLDSUBSCRIBESTATUS_DEFAULT,
}

enum SubscribingStatus {
  SUBSCRIBINGSTATUS_UNKNOWN,
  SUBSCRIBINGSTATUS_ONCE,
  SUBSCRIBINGSTATUS_CIRCLE,
  SUBSCRIBINGSTATUS_CIRCLECANCEL,
  SUBSCRIBINGSTATUS_REFUND,
  SUBSCRIBINGSTATUS_INGRACEPERIOD,
  SUBSCRIBINGSTATUS_NOTINGRACEPERIOD,
}

enum LinkmicStatus {
  Disable,
  Enable,
  Just_Following,
  Multi_Linking,
  Multi_Linking_Only_Following,
}

enum MemberMessageAction {
  UNKNOWN,
  JOINED,
  SUBSCRIBED,
}

enum ControlAction {
  ControlActionUNKNOWN,
  STREAM_PAUSED,
  STREAM_UNPAUSED,
  STREAM_ENDED,
}

enum LinkLayerMessageType {
  Linker_Unknown,
  Linker_Create,
  Linker_Invite,
  Linker_Apply,
  Linker_Permit,
  Linker_Reply,
  Linker_Kick_Out,
  Linker_Cancel_Apply,
  Linker_Cancel_Invite,
  Linker_Leave,
  Linker_Finish,
  Linker_List_Change,
  Linker_Join_Direct,
  Linker_Join_Group,
  Linker_Permit_Group,
  Linker_Cancel_Group,
  Linker_Leave_Group,
  Linker_P2P_Group_Change,
  Linker_Group_Change,
}

enum BarrageType {
  BarrageType_Unknown,
  EComOrdering,
  EComBuying,
  Normal,
  Subscribe,
  EventView,
  EventRegistered,
  SubscribeGift,
  UserUpgrade,
  GradeUserEntranceNotification,
  FansLevelUpgrade,
  FansLevelEntrance,
  GamePartnership,
}

enum EnvelopeBusinessType {
  BusinessTypeUnknown,
  BusinessTypeUserDiamond,
  BusinessTypePlatformDiamond,
  BusinessTypePlatformShell,
  BusinessTypePortal,
  BusinessTypePlatformMerch,
  BusinessTypeEoYDiamond,
  BusinessTypeFanClubGtM,
}

enum EnvelopeFollowShowStatus {
  EnvelopeFollowShowUnknown,
  EnvelopeFollowShow,
  EnvelopeFollowNotShow,
}

enum EnvelopeDisplay {
  EnvelopeDisplayUnknown,
  EnvelopeDisplayNew,
  EnvelopeDisplayHide,
}
//SEGMENT 3
enum EnvelopeFollowShowStatus {
  EnvelopeFollowShowUnknown,
  EnvelopeFollowShow,
  EnvelopeFollowNotShow,
}

enum EnvelopeDisplay {
  EnvelopeDisplayUnknown,
  EnvelopeDisplayNew,
  EnvelopeDisplayHide,
}

enum CommonContentCase {
  COMMON_CONTENT_NOT_SET,
  CREATE_CHANNEL_CONTENT,
  LIST_CHANGE_CONTENT,
  INVITE_CONTENT,
  APPLY_CONTENT,
  PERMIT_APPLY_CONTENT,
  REPLY_INVITE_CONTENT,
  KICK_OUT_CONTENT,
  CANCEL_APPLY_CONTENT,
  CANCEL_INVITE_CONTENT,
  LEAVE_CONTENT,
  FINISH_CONTENT,
  JOIN_DIRECT_CONTENT,
  JOIN_GROUP_CONTENT,
  PERMIT_GROUP_CONTENT,
  CANCEL_GROUP_CONTENT,
  LEAVE_GROUP_CONTENT,
  P2P_GROUP_CHANGE_CONTENT,
  GROUP_CHANGE_CONTENT,
}

enum LinkMessageType {
  TPYE_LINKER_UNKNOWN,
  TYPE_LINKER_CREATE,
  TYPE_LINKER_CLOSE,
  TYPE_LINKER_INVITE,
  TYPE_LINKER_APPLY,
  TYPE_LINKER_REPLY,
  TPYE_LINKER_ENTER,
  TPYE_LINKER_LEAVE,
  TYPE_LINKER_PERMIT,
  TPYE_LINKER_CANCEL_INVITE,
  TYPE_LINKER_WAITING_LIST_CHANGE,
  TYPE_LINKER_LINKED_LIST_CHANGE,
  TYPE_LINKER_UPDATE_USER,
  TPYE_LINKER_KICK_OUT,
  TPYE_LINKER_CANCEL_APPLY,
  TYPE_LINKER_MUTE,
  TYPE_LINKER_MATCH,
  TYPE_LINKER_UPDATE_USER_SETTING,
  TYPE_LINKER_MIC_IDX_UPDATE,
  TYPE_LINKER_LEAVE_V2,
  TYPE_LINKER_WAITING_LIST_CHANGE_V2,
  TYPE_LINKER_LINKED_LIST_CHANGE_V2,
  TYPE_LINKER_COHOST_LIST_CHANGE,
  TYPE_LINKER_MEDIA_CHANGE,
  TYPE_LINKER_ACCEPT_NOTICE,
  TPYE_LINKER_SYS_KICK_OUT,
  TPYE_LINKMIC_USER_TOAST,
}

enum MessageType {
  MESSAGETYPE_SUBSUCCESS,
  MESSAGETYPE_ANCHORREMINDER,
  MESSAGETYPE_ENTERROOMEXPIRESOON,
  MESSAGETYPE_SUBGOALCREATETOANCHOR,
  MESSAGETYPE_SUBGOALCOMPLETETOAUDIENCE,
  MESSAGETYPE_SUBGOALCOMPLETETOANCHOR,
  MESSAGETYPE_SUBGIFTTIKTOK2USERNOTICE,
  MESSAGETYPE_SUBGIFTTIKTOK2ANCHORNOTICE,
  MESSAGETYPE_SUBGIFTTRECEIVESENDNOTICE,
  MESSAGETYPE_SUBGIFTSENDSUCCEEDROOMMESSAGE,
  MESSAGETYPE_SUBGIFTSENDSUCCEEDANCHORNOTICE,
  MESSAGETYPE_SUBGIFTLOWVERSIONUPGRADENOTICE,
  MESSAGETYPE_SUBGIFTUSERBUYAUTHNOTICE,
}

enum Scene {
  UNKNOWN,
  CO_HOST,
  MULTI_LIVE,
}
//SEGMENT 4
enum MessageType {
  // Previous enum values...

  MESSAGETYPE_SUBGIFTLOWVERSIONUPGRADENOTICE,
  MESSAGETYPE_SUBGIFTUSERBUYAUTHNOTICE,
}

enum Scene {
  // Previous enum values...

  CO_HOST,
  MULTI_LIVE,
}

enum CommonImDispatchStrategy {
  IM_DISPATCH_STRATEGY_DEFAULT,
  IM_DISPATCH_STRATEGY_BYPASS_DISPATCH_QUEUE,
}

enum BadgeStructDataCase {
  DATA_NOT_SET,
  IMAGE,
  TEXT,
  STR,
  COMBINE,
}

enum BadgeStructBadgeDisplayType {
  BADGEDISPLAYTYPE_UNKNOWN,
  BADGEDISPLAYTYPE_IMAGE,
  BADGEDISPLAYTYPE_TEXT,
  BADGEDISPLAYTYPE_STRING,
  BADGEDISPLAYTYPE_COMBINE,
}

enum BadgeStructPosition {
  POSITIONUNKNOWN,
  POSITIONLEFT,
  POSITIONRIGHT,
}

enum UserLiveEventInfoEventPayMethod {
  EVENTPAYMETHODINVALID,
  EVENTPAYMETHODCOINS,
  EVENTPAYMETHODCASH,
}

enum UserEcommerceEntranceCreatorType {
  UNDEFINED,
  OFFICIAL,
  MARKET,
  NORMAL,
}

enum UserEcommerceEntranceEntranceType {
  PROFILE,
  SHOWCASE,
  SHOP,
}

enum UserEcommerceEntranceShopEntranceInfoStoreLabelStoreBrandLabelType {
  NONE,
  OFFICIAL,
  AUTHORIZED,
  STORE_BRAND_LABEL_TYPE_BLUE_V,
  STORE_BRAND_LABEL_TYPE_TOP_CHOICE,
}

enum UserFansClubPreferntialType {
  PRESONALPROFILE,
  OTHERROOM,
}

enum UserFansClubFansClubDataBadgeIcon {
  UNKNOWN,
  ICON,
  SMALLICON,
}

enum UserFansClubFansClubDataUserFansClubStatus {
  NOTJOINED,
  ACTIVE,
  INACTIVE,
}

enum ListUserLinkType {
  LINK_UNKNOWN,
  AUDIO,
  VIDEO,
}

enum WebcastBarrageMessageBarrageType {
  UNKNOWN,
  ECOMORDERING,
  ECOMBUYING,
  NORMAL,
  SUBSCRIBE,
  EVENTVIEW,
  EVENTREGISTERED,
  SUBSCRIBEGIFT,
  USERUPGRADE,
  GRADEUSERENTRANCENOTIFICATION,
  FANSLEVELUPGRADE,
  FANSLEVELENTRANCE,
  GAMEPARTNERSHIP,
}

@dataclass
class Common extends BetterProtoMessage {
  String method = 1;
  int msgId = 2;
  int roomId = 3;
  int createTime = 4;
  int monitor = 5;
  bool isShowMsg = 6;
  String describe = 7;
  Text displayText = 8;
  int foldType = 9;
  int anchorFoldType = 10;
}
//SEGMENT 5
@dataclass
class Common extends BetterProtoMessage {
  String method = 1;
  int msgId = 2;
  int roomId = 3;
  int createTime = 4;
  int monitor = 5;
  bool isShowMsg = 6;
  String describe = 7;
  Text displayText = 8;
  int foldType = 9;
  int anchorFoldType = 10;
  int priorityScore = 11;
  String logId = 12;
  String msgProcessFilterK = 13;
  String msgProcessFilterV = 14;
  String fromIdc = 15;
  String toIdc = 16;
  List<String> filterMsgTagsList = 17;
  CommonLiveMessageSei sei = 18;
  CommonLiveMessageId dependRootId = 19;
  CommonLiveMessageId dependId = 20;
  int anchorPriorityScore = 21;
  int roomMessageHeatLevel = 22;
  int foldTypeForWeb = 23;
  int anchorFoldTypeForWeb = 24;
  int clientSendTime = 25;
  CommonImDispatchStrategy dispatchStrategy = 26;
}

@dataclass
class CommonLiveMessageSei extends BetterProtoMessage {
  CommonLiveMessageId uniqueId = 1;
  int timestamp = 2;
}

@dataclass
class CommonLiveMessageId extends BetterProtoMessage {
  String primaryId = 1;
  String messageScene = 2;
}

@dataclass
class Text extends BetterProtoMessage {
  String key = 1;
  String defaultPattern = 2;
  TextTextFormat defaultFormat = 3;
  List<TextTextPiece> piecesList = 4;
}

@dataclass
class TextTextPiece extends BetterProtoMessage {
  int type = 1;
  TextTextFormat format = 2;
  String stringValue = 11;
  TextTextPieceUser userValue = 21;
  TextTextPieceGift giftValue = 22;
  TextTextPiecePatternRef patternRefValue = 24;
}

@dataclass
class TextTextFormat extends BetterProtoMessage {
  String color = 1;
  bool bold = 2;
  bool italic = 3;
  int weight = 4;
  int italicAngle = 5;
  int fontSize = 6;
  bool useHeighLightColor = 7;
  bool useRemoteClor = 8;
}

@dataclass
class TextTextPieceGift extends BetterProtoMessage {
  int giftId = 1;
  int colorId = 4;
}
//SEGMENT 6
@dataclass
class TextTextPieceGift extends BetterProtoMessage {
  int giftId = 1;
  int colorId = 4;
}

@dataclass
class TextTextPiecePatternRef extends BetterProtoMessage {
  String key = 1;
  String defaultPattern = 2;
}

@dataclass
class TextTextPieceUser extends BetterProtoMessage {
  User user = 1;
  bool withColon = 2;
}

@dataclass
class Image extends BetterProtoMessage {
  List<String> urlList = 1;
  bool isAnimated = 9;
}

@dataclass
class BadgeStruct extends BetterProtoMessage {
  BadgeStructBadgeDisplayType displayType = 1;
  BadgeStructImageBadge image = 20;
  BadgeStructTextBadge text = 21;
  BadgeStructStringBadge str = 22;
  BadgeStructCombineBadge combine = 23;
}

@dataclass
class BadgeStructCombineBadge extends BetterProtoMessage {
  Image icon = 2;
  BadgeStructTextBadge text = 3;
  String str = 4;
  BadgeStructProfileCardPanel profileCardPanel = 7;
  BadgeStructCombineBadgeBackground background = 11;
  BadgeStructCombineBadgeBackground backgroundDarkMode = 12;
  bool iconAutoMirrored = 13;
  bool backgroundAutoMirrored = 14;
  int publicScreenShowStyle = 15;
  int personalCardShowStyle = 16;
  int ranklistOnlineAudienceShowStyle = 17;
  int multiGuestShowStyle = 18;
}

@dataclass
class BadgeStructProfileContent extends BetterProtoMessage {
  bool useContent = 1;
  List<BadgeStructIconConfig> iconList = 2;
  BadgeStructNumberConfig numberConfig = 3;
}

@dataclass
class BadgeStructProjectionConfig extends BetterProtoMessage {
  bool useProjection = 1;
  Image icon = 2;
}

@dataclass
class BadgeStructNumberConfig extends BetterProtoMessage {
  int number = 1;
  BadgeStructCombineBadgeBackground background = 3;
}

@dataclass
class BadgeStructProfileCardPanel extends BetterProtoMessage {
  bool useNewProfileCardStyle = 1;
  BadgeStructProjectionConfig projectionConfig = 3;
  BadgeStructProfileContent profileContent = 4;
}
//SEGMENT 7
@dataclass
class BadgeStructProfileCardPanel extends BetterProtoMessage {
  bool useNewProfileCardStyle = 1;
  BadgeStructProjectionConfig projectionConfig = 3;
  BadgeStructProfileContent profileContent = 4;
}

@dataclass
class BadgeStructCombineBadgeBackground extends BetterProtoMessage {
  Image image = 1;
  String backgroundColorCode = 2;
  String borderColorCode = 3;
}

@dataclass
class BadgeStructImageBadge extends BetterProtoMessage {
  Image image = 2;
}

@dataclass
class BadgeStructTextBadge extends BetterProtoMessage {
  String defaultPattern = 3;
}

@dataclass
class BadgeStructIconConfig extends BetterProtoMessage {
  Image icon = 1;
  BadgeStructCombineBadgeBackground background = 2;
}

@dataclass
class BadgeStructStringBadge extends BetterProtoMessage {
  String str = 2;
}

@dataclass
class GiftStruct extends BetterProtoMessage {
  Image image = 1;
  String describe = 2;
  int duration = 4;
  int id = 5;
  bool forLinkmic = 7;
  bool combo = 10;
  int type = 11;
  int diamondCount = 12;
  bool isDisplayedOnPanel = 13;
  int primaryEffectId = 14;
  Image giftLabelIcon = 15;
  String name = 16;
  Image icon = 21;
  String goldEffect = 24;
  Image previewImage = 47;
  GiftStructGiftPanelBanner giftPanelBanner = 48;
  bool isBroadcastGift = 49;
  bool isEffectBefview = 50;
  bool isRandomGift = 51;
  bool isBoxGift = 52;
  bool canPutInGiftBox = 53;
}

@dataclass
class GiftStructGiftPanelBanner extends BetterProtoMessage {
  Text displayText = 1;
  Image leftIcon = 2;
  String schemaUrl = 3;
  List<String> bgColorValuesList = 5;
  String bannerLynxUrl = 6;
}

@dataclass
class GiftStructGiftRandomEffectInfo extends BetterProtoMessage {
  GiftStructRandomGiftPanelBanner randomGiftPanelBanner = 1;
  List<int> effectIdsList = 2;
  String hostKey = 3;
  String audienceKey = 4;
  GiftStructRandomGiftBubble randomGiftBubble = 5;
}
//SEGMENT 8
@dataclass
class GiftStructRandomGiftBubble extends BetterProtoMessage {
  String displayText = 1;
  Image iconDynamicEffect = 2;
}

@dataclass
class GiftStructRandomGiftPanelBanner extends BetterProtoMessage {
  Image bgImage = 1;
  Image shadingImage = 2;
  int targetNum = 3;
  int collectNum = 4;
  String displayText = 5;
  Image leftIcon = 6;
  String schemaUrl = 7;
  List<String> bgColorValuesList = 8;
  int round = 9;
}

@dataclass
class User extends BetterProtoMessage {
  int id = 1;
  String nickname = 3;
  String bioDescription = 5;
  Image avatarThumb = 9;
  Image avatarMedium = 10;
  Image avatarLarge = 11;
  bool verified = 12;
  int status = 15;
  int createTime = 16;
  int modifyTime = 17;
  int secret = 18;
  String shareQrcodeUri = 19;
  List<Image> badgeImageList = 21;
  UserFollowInfo followInfo = 22;
  UserPayGrade payGrade = 23;
  UserFansClub fansClub = 24;
  UserBorder border = 25;
  String specialId = 26;
  Image avatarBorder = 27;
  Image medal = 28;
  List<Image> realTimeIconsList = 29;
  List<Image> newRealTimeIconsList = 30;
  int topVipNo = 31;
  UserUserAttr userAttr = 32;
  UserOwnRoom ownRoom = 33;
  int payScore = 34;
  int ticketCount = 35;
  LinkmicStatus linkMicStats = 37;
  String displayId = 38;
  bool withCommercePermission = 39;
  bool withFusionShopEntry = 40;
  UserAnchorLevel webcastAnchorLevel = 42;
  String verifiedContent = 43;
  UserAuthorStats authorStats = 44;
  List<User> topFansList = 45;
  String secUid = 46;
}
//SEGMENT 9
@dataclass
class User extends BetterProtoMessage {
  int id = 1;
  String nickname = 3;
  String bioDescription = 5;
  Image avatarThumb = 9;
  Image avatarMedium = 10;
  Image avatarLarge = 11;
  bool verified = 12;
  int status = 15;
  int createTime = 16;
  int modifyTime = 17;
  int secret = 18;
  String shareQrcodeUri = 19;
  List<Image> badgeImageList = 21;
  UserFollowInfo followInfo = 22;
  UserPayGrade payGrade = 23;
  UserFansClub fansClub = 24;
  UserBorder border = 25;
  String specialId = 26;
  Image avatarBorder = 27;
  Image medal = 28;
  List<Image> realTimeIconsList = 29;
  List<Image> newRealTimeIconsList = 30;
  int topVipNo = 31;
  UserUserAttr userAttr = 32;
  UserOwnRoom ownRoom = 33;
  int payScore = 34;
  int ticketCount = 35;
  LinkmicStatus linkMicStats = 37;
  String displayId = 38;
  bool withCommercePermission = 39;
  bool withFusionShopEntry = 40;
  UserAnchorLevel webcastAnchorLevel = 42;
  String verifiedContent = 43;
  UserAuthorStats authorStats = 44;
  List<User> topFansList = 45;
  String secUid = 46;
  int userRole = 47;
  UserActivityInfo activityReward = 49;
  Image personalCard = 52;
  UserAuthenticationInfo authenticationInfo = 53;
  List<Image> mediaBadgeImageList = 57;
  List<int> commerceWebcastConfigIdsList = 60;
  List<UserBorder> borderList = 61;
  UserComboBadgeInfo comboBadgeInfo = 62;
  UserSubscribeInfo subscribeInfo = 63;
  List<BadgeStruct> badgeList = 64;
  List<int> mintTypeLabelList = 65;
  UserFansClubInfo fansClubInfo = 66;
  bool allowFindByContacts = 1002;
  bool allowOthersDownloadVideo = 1003;
  bool allowOthersDownloadWhenSharingVideo = 1004;
  bool allowShareShowProfile = 1005;
  bool allowShowInGossip = 1006;
  bool allowShowMyAction = 1007;
  bool allowStrangeComment = 1008;
  bool allowUnfollowerComment = 1009;
  bool allowUseLinkmic = 1010;
  UserAnchorLevel anchorLevel = 1011;
  Image avatarJpg = 1012;
  String bgImgUrl = 1013;
  int blockStatus = 1016;
  int commentRestrict = 1017;
  String constellation = 1018;
  int disableIchat = 1019;
  int enableIchatImg = 1020;
  int exp = 1021;
  int fanTicketCount = 1022;
  bool foldStrangerChat = 1023;
  int followStatus = 1024;
  int ichatRestrictType = 1027;
  String idStr = 1028;
  bool isFollower = 1029;
  bool isFollowing = 1030;
  bool needProfileGuide = 1031;
  int payScores = 1032;
  bool pushCommentStatus = 1033;
  bool pushDigg = 1034;
  bool pushFollow = 1035;
  bool pushFriendAction = 1036;
  bool pushIchat = 1037;
  bool pushStatus = 1038;
  bool pushVideoPost = 1039;
  bool pushVideoRecommend = 1040;
  UserUserStats stats = 1041;
  String verifiedReason = 1043;
}
//SEGMENT 10
@dataclass
class User extends BetterProtoMessage {
  int id = 1;
  String nickname = 3;
  String bioDescription = 5;
  Image avatarThumb = 9;
  Image avatarMedium = 10;
  Image avatarLarge = 11;
  bool verified = 12;
  int status = 15;
  int createTime = 16;
  int modifyTime = 17;
  int secret = 18;
  String shareQrcodeUri = 19;
  List<Image> badgeImageList = 21;
  UserFollowInfo followInfo = 22;
  UserPayGrade payGrade = 23;
  UserFansClub fansClub = 24;
  UserBorder border = 25;
  String specialId = 26;
  Image avatarBorder = 27;
  Image medal = 28;
  List<Image> realTimeIconsList = 29;
  List<Image> newRealTimeIconsList = 30;
  int topVipNo = 31;
  UserUserAttr userAttr = 32;
  UserOwnRoom ownRoom = 33;
  int payScore = 34;
  int ticketCount = 35;
  LinkmicStatus linkMicStats = 37;
  String displayId = 38;
  bool withCommercePermission = 39;
  bool withFusionShopEntry = 40;
  UserAnchorLevel webcastAnchorLevel = 42;
  String verifiedContent = 43;
  UserAuthorStats authorStats = 44;
  List<User> topFansList = 45;
  String secUid = 46;
  int userRole = 47;
  UserActivityInfo activityReward = 49;
  Image personalCard = 52;
  UserAuthenticationInfo authenticationInfo = 53;
  List<Image> mediaBadgeImageList = 57;
  List<int> commerceWebcastConfigIdsList = 60;
  List<UserBorder> borderList = 61;
  UserComboBadgeInfo comboBadgeInfo = 62;
  UserSubscribeInfo subscribeInfo = 63;
  List<BadgeStruct> badgeList = 64;
  List<int> mintTypeLabelList = 65;
  UserFansClubInfo fansClubInfo = 66;
  bool allowFindByContacts = 1002;
  bool allowOthersDownloadVideo = 1003;
  bool allowOthersDownloadWhenSharingVideo = 1004;
  bool allowShareShowProfile = 1005;
  bool allowShowInGossip = 1006;
  bool allowShowMyAction = 1007;
  bool allowStrangeComment = 1008;
  bool allowUnfollowerComment = 1009;
  bool allowUseLinkmic = 1010;
  UserAnchorLevel anchorLevel = 1011;
  Image avatarJpg = 1012;
  String bgImgUrl = 1013;
  int blockStatus = 1016;
  int commentRestrict = 1017;
  String constellation = 1018;
  int disableIchat = 1019;
  int enableIchatImg = 1020;
  int exp = 1021;
  int fanTicketCount = 1022;
  bool foldStrangerChat = 1023;
  int followStatus = 1024;
  int ichatRestrictType = 1027;
  String idStr = 1028;
  bool isFollower = 1029;
  bool isFollowing = 1030;
  bool needProfileGuide = 1031;
  int payScores = 1032;
  bool pushCommentStatus = 1033;
  bool pushDigg = 1034;
  bool pushFollow = 1035;
  bool pushFriendAction = 1036;
  bool pushIchat = 1037;
  bool pushStatus = 1038;
  bool pushVideoPost = 1039;
  bool pushVideoRecommend = 1040;
  UserUserStats stats = 1041;
  String verifiedReason = 1043;
  bool withCarManagementPermission = 1044;
  List<UserLiveEventInfo> upcomingEventList = 1045;
  String scmLabel = 1046;
  UserEcommerceEntrance ecommerceEntrance = 1047;
  bool isBlock = 1048;
}

@dataclass
class UserLiveEventInfo extends BetterProtoMessage {
  int eventId = 1;
  int startTime = 2;
  int duration = 3;
  String title = 4;
  String description = 5;
  bool hasSubscribed = 6;
  bool isPaidEvent = 7;
  int ticketAmount = 8;
  int payMethod = 9;
}

@dataclass
class UserLiveEventInfoWalletPackage extends BetterProtoMessage {
  String iapId = 1;
  String usdPriceShow = 2;
}

@dataclass
class UserActivityInfo extends BetterProtoMessage {
  Image badge = 1;
  Image storytag = 2;
}

@dataclass
class UserAnchorLevel extends BetterProtoMessage {
  int level = 1;
  int experience = 2;
  int lowestExperienceThisLevel = 3;
  int highestExperienceThisLevel = 4;
  int taskStartExperience = 5;
  int taskStartTime = 6;
  int taskDecreaseExperience = 7;
  int taskTargetExperience = 8;
  int taskEndTime = 9;
  Image profileDialogBg = 10;
  Image profileDialogBgBack = 11;
  Image stageLevel = 12;
  Image smallIcon = 13;
}

@dataclass
class UserAuthenticationInfo extends BetterProtoMessage {
  String customVerify = 1;
  String enterpriseVerifyReason = 2;
  Image authenticationBadge = 3;
}

@dataclass
class UserAuthorStats extends BetterProtoMessage {
  int videoTotalCount = 1;
  int videoTotalPlayCount = 2;
  int videoTotalShareCount = 3;
  int videoTotalSeriesCount = 4;
  int varietyShowPlayCount = 5;
  int videoTotalFavoriteCount = 6;
}
//SEGMENT 11
@dataclass
class UserBorder extends BetterProtoMessage {
  Image icon = 1;
  int level = 2;
  String source = 3;
  Image profileDecorationRibbon = 4;
  String avatarBackgroundColor = 7;
  String avatarBackgroundBorderColor = 8;
}

@dataclass
class UserComboBadgeInfo extends BetterProtoMessage {
  Image icon = 1;
  int comboCount = 2;
}

@dataclass
class UserEcommerceEntrance extends BetterProtoMessage {
  UserEcommerceEntranceEntranceType entranceType = 1;
  UserEcommerceEntranceCreatorType creatorType = 2;
  String schema = 3;
  UserEcommerceEntranceShopEntranceInfo shopEntranceInfo = 4;
  UserEcommerceEntranceShowcaseEntranceInfo showcaseEntranceInfo = 5;
}

@dataclass
class UserEcommerceEntranceShopEntranceInfo extends BetterProtoMessage {
  String shopId = 1;
  String shopName = 2;
  String shopRating = 3;
  UserEcommerceEntranceShopEntranceInfoStoreLabel storeLabel = 4;
  String formatSoldCount = 5;
  int soldCount = 6;
  int expRatePercentile = 7;
  String expRateTopDisplay = 8;
  int rateDisplayStyle = 9;
  bool showRateNotApplicable = 10;
}

@dataclass
class UserEcommerceEntranceShopEntranceInfoStoreLabel extends BetterProtoMessage {
  UserEcommerceEntranceShopEntranceInfoStoreLabelStoreOfficialLabel officialLabel = 1;
  bool isBytemall = 2;
}

@dataclass
class UserEcommerceEntranceShopEntranceInfoStoreLabelStoreOfficialLabel extends BetterProtoMessage {
  UserEcommerceEntranceShopEntranceInfoStoreLabelStoreOfficialLabelShopLabelImage labelImageLight = 1;
  UserEcommerceEntranceShopEntranceInfoStoreLabelStoreOfficialLabelShopLabelImage labelImageDark = 2;
  int labelType = 3;
  String labelTypeStr = 4;
}

@dataclass
class UserEcommerceEntranceShopEntranceInfoStoreLabelStoreOfficialLabelShopLabelImage extends BetterProtoMessage {
  int height = 1;
  int width = 2;
  String minetype = 3;
  String thumbUri = 4;
  List<String> thumbUriList = 5;
}
//SEGMENT 12
@dataclass
class UserEcommerceEntranceShopEntranceInfoStoreLabelStoreOfficialLabelShopLabelImage extends BetterProtoMessage {
  int height = 1;
  int width = 2;
  String minetype = 3;
  String thumbUri = 4;
  List<String> thumbUriList = 5;
  String uri = 6;
  List<String> urlList = 7;
  String color = 8;
}

@dataclass
class UserEcommerceEntranceShowcaseEntranceInfo extends BetterProtoMessage {
  String formatSoldCount = 1;
  int soldCount = 2;
}

@dataclass
class UserFansClub extends BetterProtoMessage {
  UserFansClubFansClubData data = 1;
}
//SEGMENT 13 ------------------------------------ START FROM 1
import 'package:betterproto/betterproto.dart';

// UserFansClubFansClubData message
@dataclass
class UserFansClubFansClubData extends Message {
  @Field(1)
  String clubName;

  @Field(2)
  int level;

  @Field(3)
  UserFansClubFansClubDataUserFansClubStatus userFansClubStatus;

  @Field(5)
  List<int> availableGiftIdsList;

  @Field(6)
  int anchorId;
}

enum UserFansClubFansClubDataUserFansClubStatus {
  // Define enum values here
}

// UserFansClubInfo message
@dataclass
class UserFansClubInfo extends Message {
  @Field(1)
  bool isSleeping;

  @Field(2)
  int fansLevel;

  @Field(3)
  int fansScore;

  @Field(4)
  Image badge;

  @Field(5)
  int fansCount;
}

// UserFollowInfo message
@dataclass
class UserFollowInfo extends Message {
  @Field(1)
  int followingCount;

  @Field(2)
  int followerCount;

  @Field(3)
  int followStatus;

  @Field(4)
  int pushStatus;
}

// UserOwnRoom message
@dataclass
class UserOwnRoom extends Message {
  @Field(1)
  List<int> roomIdsList;

  @Field(2)
  List<String> roomIdsStrList;
}

// UserPayGrade message
@dataclass
class UserPayGrade extends Message {
  @Field(2)
  Image diamondIcon;

  @Field(3)
  String name;

  @Field(4)
  Image icon;

  @Field(5)
  String nextName;

  @Field(6)
  int level;

  @Field(7)
  Image nextIcon;

  @Field(13)
  String gradeDescribe;

  @Field(14)
  List<UserPayGradeGradeIcon> gradeIconList;

  @Field(15)
  int screenChatType;

  @Field(16)
  Image imIcon;

  @Field(17)
  Image imIconWithLevel;

  @Field(18)
  Image liveIcon;

  @Field(19)
  Image newImIconWithLevel;

  @Field(20)
  Image newLiveIcon;

  @Field(21)
  int upgradeNeedConsume;

  @Field(22)
  String nextPrivileges;

  @Field(23)
  Image background;

  @Field(24)
  Image backgroundBack;

  @Field(25)
  int score;

  @Field(1001)
  String gradeBanner;
}

// UserPayGradeGradeIcon message
@dataclass
class UserPayGradeGradeIcon extends Message {
  // Define fields for UserPayGradeGradeIcon message if needed
}

// Image message
@dataclass
class Image extends Message {
  // Define fields for Image message if needed
}
// SEGMENT 13 - 2
// Continuing from the previous conversion

// UserPayGrade message continued
@dataclass
class UserPayGrade extends Message {
  @Field(24)
  Image backgroundBack;

  @Field(25)
  int score;

  @Field(1001)
  String gradeBanner;

  @Field(1002)
  Image profileDialogBg;

  @Field(1003)
  Image profileDialogBgBack;
}

// UserPayGradeGradeIcon message
@dataclass
class UserPayGradeGradeIcon extends Message {
  @Field(1)
  Image icon;

  @Field(2)
  int iconDiamond;

  @Field(3)
  int level;

  @Field(4)
  String levelStr;
}

// UserSubscribeBadge message
@dataclass
class UserSubscribeBadge extends Message {
  @Field(3)
  Image originImg;

  @Field(4)
  Image previewImg;
}

// UserSubscribeInfo message
@dataclass
class UserSubscribeInfo extends Message {
  @Field(1)
  bool qualification;

  @Field(2)
  bool isSubscribe;

  @Field(3)
  UserSubscribeBadge badge;

  @Field(4)
  bool enableSubscription;

  @Field(5)
  int subscriberCount;

  @Field(6)
  bool isInGracePeriod;

  @Field(7)
  bool isSubscribedToAnchor;

  @Field(9)
  bool userGiftSubAuth;

  @Field(10)
  bool anchorGiftSubAuth;
}

// UserUserAttr message
@dataclass
class UserUserAttr extends Message {
  @Field(1)
  bool isMuted;

  @Field(2)
  bool isAdmin;

  @Field(3)
  bool isSuperAdmin;

  @Field(4)
  int muteDuration;
}

// UserUserStats message
@dataclass
class UserUserStats extends Message {
  @Field(1)
  int id;

  @Field(2)
  String idStr;

  @Field(3)
  int followingCount;

  @Field(4)
  int followerCount;

  @Field(5)
  int recordCount;

  @Field(6)
  int totalDuration;

  @Field(7)
  int dailyFanTicketCount;

  @Field(8)
  int dailyIncome;

  @Field(9)
  int itemCount;

  @Field(10)
  int favoriteItemCount;

  @Field(12)
  int diamondConsumedCount;

  @Field(13)
  int tuwenItemCount;
}

// Emote message
@dataclass
class Emote extends Message {
  // Define fields for Emote message if needed
}
//SEGMENT 13-3
// Continuing from the previous conversion

// Emote message
@dataclass
class Emote extends Message {
  @Field(1)
  String emoteId;

  @Field(2)
  Image image;

  @Field(3)
  AuditStatus auditStatus;

  @Field(4)
  String uuid;

  @Field(5)
  EmoteType emoteType;

  @Field(6)
  ContentSource contentSource;

  @Field(7)
  EmotePrivateType emotePrivateType;
}

// AuditStatus enum
enum AuditStatus {
  // Define enum values here
}

// EmoteType enum
enum EmoteType {
  // Define enum values here
}

// ContentSource enum
enum ContentSource {
  // Define enum values here
}

// EmotePrivateType enum
enum EmotePrivateType {
  // Define enum values here
}

// PunishEventInfo message
@dataclass
class PunishEventInfo extends Message {
  @Field(1)
  String punishType;

  @Field(2)
  String punishReason;

  @Field(3)
  String punishId;

  @Field(4)
  int violationUid;

  @Field(5)
  int punishTypeId;

  @Field(6)
  int duration;
}

// MsgFilter message
@dataclass
class MsgFilter extends Message {
  @Field(1)
  bool isGifter;

  @Field(2)
  bool isSubscribedToAnchor;
}

// UserIdentity message
@dataclass
class UserIdentity extends Message {
  @Field(1)
  bool isGiftGiverOfAnchor;

  @Field(2)
  bool isSubscriberOfAnchor;

  @Field(3)
  bool isMutualFollowingWithAnchor;

  @Field(4)
  bool isFollowerOfAnchor;

  @Field(5)
  bool isModeratorOfAnchor;

  @Field(6)
  bool isAnchor;
}

// Goal message
@dataclass
class Goal extends Message {
  @Field(1)
  int id;

  @Field(5)
  String description;

  @Field(6)
  int auditStatus;

  @Field(8)
  int startTime;

  @Field(9)
  int expireTime;

  @Field(10)
  int realFinishTime;

  @Field(11)
  List<GoalGoalContributor> contributorsList;

  @Field(12)
  int contributorsLength;

  @Field(13)
  String idStr;

  @Field(14)
  String auditDescription;

  @Field(15)
  GoalGoalStats stats;
}

// GoalGoalContributor message
@dataclass
class GoalGoalContributor extends Message {
  // Define fields for GoalGoalContributor message if needed
}

// GoalGoalStats message
@dataclass
class GoalGoalStats extends Message {
  @Field(1)
  int totalCoins;

  @Field(2)
  int totalContributor;
}
//SEGMENT 13-4
// Continuing from the previous conversion

// GoalGoalStats message
@dataclass
class GoalGoalStats extends Message {
  @Field(1)
  int totalCoins;

  @Field(2)
  int totalContributor;
}

// GoalGoalContributor message
@dataclass
class GoalGoalContributor extends Message {
  @Field(1)
  int userId;

  @Field(2)
  Image avatar;

  @Field(3)
  String displayId;

  @Field(4)
  int score;

  @Field(5)
  String userIdStr;

  @Field(6)
  bool inRoom;

  @Field(7)
  bool isFriend;

  @Field(8)
  List<BadgeStruct> badgeList;

  @Field(9)
  bool followByOwner;

  @Field(10)
  bool isFistContribute;
}

// Indicator message
@dataclass
class Indicator extends Message {
  @Field(1)
  String key;

  @Field(2)
  int op;
}

// Ranking message
@dataclass
class Ranking extends Message {
  @Field(1)
  String type;

  @Field(2)
  String label;

  @Field(3)
  TikTokColor color;

  @Field(4)
  List<ValueLabel> details;
}

// TikTokColor message
@dataclass
class TikTokColor extends Message {
  @Field(1)
  String color;

  @Field(4)
  int id;

  @Field(6)
  int data1;
}

// ValueLabel message
@dataclass
class ValueLabel extends Message {
  @Field(1)
  int data;

  @Field(2)
  String label;

  @Field(3)
  String label2;

  @Field(11)
  String label3;
}

// MessageDetails message
@dataclass
class MessageDetails extends Message {
  @Field(1)
  int data1;

  @Field(2)
  TikTokColor color;

  @Field(11)
  String category;

  @Field(21)
  UserContainer user;
}

// UserContainer message
@dataclass
class UserContainer extends Message {
  @Field(1)
  User user;

  @Field(2)
  int data1;
}

// DataContainer message
@dataclass
class DataContainer extends Message {
  @Field(1)
  int data1;

  @Field(2)
  int data2;

  @Field(3)
  int data3;

  @Field(4)
  int data4;
}
//SEGMENT 13-5
// Continuing from the previous conversion

// DataContainer message
@dataclass
class DataContainer extends Message {
  @Field(1)
  int data1;

  @Field(2)
  int data2;

  @Field(3)
  int data3;

  @Field(4)
  int data4;

  @Field(5)
  int data5;

  @Field(6)
  int data6;

  @Field(7)
  int data7;

  @Field(8)
  int data8;

  @Field(9)
  int data9;
}

// TimeStampContainer message
@dataclass
class TimeStampContainer extends Message {
  @Field(1)
  int timestamp1;

  @Field(2)
  int timestamp2;

  @Field(3)
  int timestamp3;
}

// MemberMessageData message
@dataclass
class MemberMessageData extends Message {
  @Field(1)
  String type;

  @Field(2)
  String label;

  @Field(3)
  TikTokColor color;

  @Field(4)
  List<MessageDetails> details;
}

// LinkMicArmiesItems message
@dataclass
class LinkMicArmiesItems extends Message {
  @Field(1)
  int hostUserId;

  @Field(2)
  List<LinkMicArmiesItemsLinkMicArmiesGroup> battleGroups;
}

// LinkMicArmiesItemsLinkMicArmiesGroup message
@dataclass
class LinkMicArmiesItemsLinkMicArmiesGroup extends Message {
  @Field(1)
  List<User> users;

  @Field(2)
  int points;
}

// PollStartContent message
@dataclass
class PollStartContent extends Message {
  @Field(1)
  int startTime;

  @Field(2)
  int endTime;

  @Field(3)
  List<PollOptionInfo> optionList;

  @Field(4)
  String title;

  @Field(5)
  User operator;
}

// PollEndContent message
@dataclass
class PollEndContent extends Message {
  @Field(1)
  int endType;

  @Field(2)
  List<PollOptionInfo> optionList;

  @Field(3)
  User operator;
}

// PollOptionInfo message
@dataclass
class PollOptionInfo extends Message {
  @Field(1)
  int votes;

  @Field(2)
  String displayContent;

  @Field(3)
  int optionIdx;

  @Field(4)
  List<VoteUser> voteUserList;
}

// VoteUser message
@dataclass
class VoteUser extends Message {
  @Field(1)
  int userId;

  @Field(2)
  String nickName;
}
//SEGMENT 13-6
// Continuing from the previous conversion

// VoteUser message
@dataclass
class VoteUser extends Message {
  @Field(1)
  int userId;

  @Field(2)
  String nickName;

  @Field(3)
  Image avatarThumb;
}

// PollUpdateVotesContent message
@dataclass
class PollUpdateVotesContent extends Message {
  @Field(2)
  List<PollOptionInfo> optionList;
}

// UserFanTicket message
@dataclass
class UserFanTicket extends Message {
  @Field(1)
  int userId;

  @Field(2)
  int fanTicket;

  @Field(3)
  int matchTotalScore;

  @Field(4)
  int matchRank;
}

// FanTicketRoomNoticeContent message
@dataclass
class FanTicketRoomNoticeContent extends Message {
  @Field(1)
  List<UserFanTicket> userFanTicketList;

  @Field(2)
  int totalLinkMicFanTicket;

  @Field(3)
  int matchId;

  @Field(4)
  int eventTime;

  @Field(5)
  String fanTicketIconUrl;
}

// LinkerAcceptNoticeContent message
@dataclass
class LinkerAcceptNoticeContent extends Message {
  @Field(1)
  int fromUserId;

  @Field(2)
  int fromRoomId;

  @Field(3)
  int toUserId;
}

// LinkerCancelContent message
@dataclass
class LinkerCancelContent extends Message {
  @Field(1)
  int fromUserId;

  @Field(2)
  int toUserId;

  @Field(3)
  int cancelType;

  @Field(4)
  int actionId;
}

// ListUser message
@dataclass
class ListUser extends Message {
  @Field(1)
  User user;

  @Field(2)
  int linkmicId;

  @Field(3)
  String linkmicIdStr;

  @Field(4)
  int linkStatus;

  @Field(5)
  ListUserLinkType linkType;

  @Field(6)
  int userPosition;

  @Field(7)
  int silenceStatus;

  @Field(8)
  int modifyTime;

  @Field(9)
  int linkerId;

  @Field(10)
  int roleType;
}

// LinkerCloseContent message
@dataclass
class LinkerCloseContent extends Message {
  // No fields needed for LinkerCloseContent message
}

// LinkerCreateContent message
@dataclass
class LinkerCreateContent extends Message {
  // Define fields for LinkerCreateContent message if needed
}
//SEGMENT 13-7
// Continuing from the previous conversion

// LinkerCloseContent message
@dataclass
class LinkerCloseContent extends Message {
  // No fields needed for LinkerCloseContent message
}

// LinkerCreateContent message
@dataclass
class LinkerCreateContent extends Message {
  @Field(1)
  int ownerId;

  @Field(2)
  int ownerRoomId;

  @Field(3)
  int linkType;
}

// LinkerEnterContent message
@dataclass
class LinkerEnterContent extends Message {
  @Field(1)
  List<ListUser> linkedUsersList;

  @Field(2)
  int anchorMultiLiveEnum;

  @Field(3)
  LinkmicUserSettingInfo anchorSettingInfo;
}

// LinkerInviteContent message
@dataclass
class LinkerInviteContent extends Message {
  @Field(1)
  int fromUserId;

  @Field(2)
  int fromRoomId;

  @Field(3)
  String toRtcExtInfo;

  @Field(4)
  bool rtcJoinChannel;

  @Field(5)
  int vendor;

  @Field(6)
  String secFromUserId;

  @Field(7)
  String toLinkmicIdStr;

  @Field(8)
  User fromUser;

  @Field(9)
  int requiredMicIdx;
}

// LinkerKickOutContent message
@dataclass
class LinkerKickOutContent extends Message {
  @Field(1)
  int fromUserId;

  @Field(2)
  KickoutReason kickoutReason;
}

// LinkerLeaveContent message
@dataclass
class LinkerLeaveContent extends Message {
  @Field(1)
  int userId;

  @Field(2)
  String linkmicIdStr;

  @Field(3)
  int sendLeaveUid;

  @Field(4)
  int leaveReason;
}

// LinkerLinkedListChangeContent message
@dataclass
class LinkerLinkedListChangeContent extends Message {
  // No fields needed for LinkerLinkedListChangeContent message
}

// CohostListChangeContent message
@dataclass
class CohostListChangeContent extends Message {
  // No fields needed for CohostListChangeContent message
}

// LinkerListChangeContent message
@dataclass
class LinkerListChangeContent extends Message {
  @Field(1)
  List<ListUser> linkedUsersList;

  @Field(2)
  List<ListUser> appliedUsersList;

  @Field(3)
  List<ListUser> connectingUsersList;
}

// LinkerMediaChangeContent message
@dataclass
class LinkerMediaChangeContent extends Message {
  @Field(1)
  int op;

  @Field(2)
  int toUserId;

  @Field(3)
  int anchorId;
}
//SEGMENT 13-8
// Continuing from the previous conversion

// LinkerMediaChangeContent message
@dataclass
class LinkerMediaChangeContent extends Message {
  @Field(1)
  int op;

  @Field(2)
  int toUserId;

  @Field(3)
  int anchorId;

  @Field(4)
  int roomId;

  @Field(5)
  int changeScene;
}

// LinkerMicIdxUpdateContent message
@dataclass
class LinkerMicIdxUpdateContent extends Message {
  // No fields needed for LinkerMicIdxUpdateContent message
}

// LinkerMuteContent message
@dataclass
class LinkerMuteContent extends Message {
  @Field(1)
  int userId;

  @Field(2)
  int status;
}

// LinkerRandomMatchContent message
@dataclass
class LinkerRandomMatchContent extends Message {
  @Field(1)
  User user;

  @Field(2)
  int roomId;

  @Field(3)
  int inviteType;

  @Field(4)
  String matchId;

  @Field(5)
  int innerChannelId;
}

// LinkerReplyContent message
@dataclass
class LinkerReplyContent extends Message {
  @Field(1)
  int fromUserId;

  @Field(2)
  int fromRoomId;

  @Field(3)
  LinkerReplyContentLinkmicInfo fromUserLinkmicInfo;

  @Field(4)
  int toUserId;

  @Field(5)
  LinkerReplyContentLinkmicInfo toUserLinkmicInfo;

  @Field(6)
  int linkType;

  @Field(7)
  int replyStatus;

  @Field(8)
  LinkerSetting linkerSetting;

  @Field(9)
  User fromUser;

  @Field(10)
  User toUser;
}

// LinkerReplyContentLinkmicInfo message
@dataclass
class LinkerReplyContentLinkmicInfo extends Message {
  @Field(1)
  String accessKey;

  @Field(2)
  int linkMicId;

  @Field(3)
  bool joinable;

  @Field(4)
  int confluenceType;

  @Field(5)
  String rtcExtInfo;

  @Field(6)
  String rtcAppId;

  @Field(7)
  String rtcAppSign;

  @Field(8)
  String linkmicIdStr;

  @Field(9)
  int vendor;
}

// LinkerSetting message
@dataclass
class LinkerSetting extends Message {
  @Field(1)
  int maxMemberLimit;

  @Field(2)
  int linkType;

  @Field(3)
  int scene;
}
//SEGMENT 13-9
// Continuing from the previous conversion

// LinkerSetting message
@dataclass
class LinkerSetting extends Message {
  @Field(1)
  int maxMemberLimit;

  @Field(2)
  int linkType;

  @Field(3)
  int scene;

  @Field(4)
  int ownerUserId;

  @Field(5)
  int ownerRoomId;

  @Field(6)
  int vendor;
}

// LinkerSysKickOutContent message
@dataclass
class LinkerSysKickOutContent extends Message {
  @Field(1)
  int userId;

  @Field(2)
  String linkmicIdStr;
}

// LinkmicUserToastContent message
@dataclass
class LinkmicUserToastContent extends Message {
  @Field(1)
  int userId;

  @Field(2)
  int roomId;

  @Field(3)
  Text displayText;
}

// LinkerUpdateUserContent message
@dataclass
class LinkerUpdateUserContent extends Message {
  @Field(1)
  int fromUserId;

  @Field(2)
  int toUserId;
}

// LinkerUpdateUserSettingContent message
@dataclass
class LinkerUpdateUserSettingContent extends Message {
  // No fields needed for LinkerUpdateUserSettingContent message
}

// LinkerWaitingListChangeContent message
@dataclass
class LinkerWaitingListChangeContent extends Message {
  // No fields needed for LinkerWaitingListChangeContent message
}

// LinkmicUserSettingInfo message
@dataclass
class LinkmicUserSettingInfo extends Message {
  @Field(1)
  int userId;

  @Field(2)
  int layout;

  @Field(3)
  int fixMicNum;

  @Field(4)
  int allowRequestFromUser;

  @Field(5)
  int allowRequestFromFollowerOnly;

  @Field(7)
  LinkmicApplierSortSetting applierSortSetting;
}

// Player message
@dataclass
class Player extends Message {
  @Field(1)
  int roomId;

  @Field(2)
  int userId;
}

// AllListUser message
@dataclass
class AllListUser extends Message {
  @Field(2)
  List<LinkLayerListUser> linkedList;

  @Field(3)
  List<LinkLayerListUser> appliedList;

  @Field(4)
  List<LinkLayerListUser> invitedList;

  @Field(5)
  List<LinkLayerListUser> readyList;
}

// LinkLayerListUser message
@dataclass
class LinkLayerListUser extends Message {
  @Field(1)
  User user;

  @Field(2)
  int linkmicId;

  @Field(3)
  Position pos;

  @Field(4)
  int linkedTimeNano;
}
//SEGMENT 13-10
// Continuing from the previous conversion

// LinkLayerListUser message
@dataclass
class LinkLayerListUser extends Message {
  @Field(1)
  User user;

  @Field(2)
  int linkmicId;

  @Field(3)
  Position pos;

  @Field(4)
  int linkedTimeNano;

  @Field(5)
  String appVersion;

  @Field(7)
  int magicNumber1;
}

// Position message
@dataclass
class Position extends Message {
  @Field(1)
  int type;

  @Field(2)
  LinkPosition link;
}

// LinkPosition message
@dataclass
class LinkPosition extends Message {
  @Field(1)
  int position;

  @Field(2)
  int opt;
}

// GroupPlayer message
@dataclass
class GroupPlayer extends Message {
  @Field(1)
  int channelId;

  @Field(2)
  User user;
}

// DslConfig message
@dataclass
class DslConfig extends Message {
  @Field(1)
  int sceneVersion;

  @Field(2)
  String layoutId;
}

// GroupChannelAllUser message
@dataclass
class GroupChannelAllUser extends Message {
  @Field(1)
  int groupChannelId;

  @Field(2)
  List<GroupChannelUser> userList;
}

// GroupChannelUser message
@dataclass
class GroupChannelUser extends Message {
  @Field(1)
  int channelId;

  @Field(2)
  GroupStatus status;

  @Field(3)
  TextType type;

  @Field(4)
  AllListUser allUser;

  @Field(5)
  int joinTime;

  @Field(6)
  int linkedTime;

  @Field(7)
  GroupPlayer ownerUser;
}

// RtcExtraInfo message
@dataclass
class RtcExtraInfo extends Message {
  @Field(1)
  RtcExtraInfoRtcEngineConfig liveRtcEngineConfig;

  @Field(2)
  List<RtcExtraInfoRtcLiveVideoParam> liveRtcVideoParamList;

  @Field(3)
  RtcExtraInfoRtcBitrateMap rtcBitrateMap;

  @Field(4)
  int rtcFps;

  @Field(8)
  String rtcBusinessId;

  @Field(10)
  int interactClientType;
}

// RtcExtraInfoRtcEngineConfig message
@dataclass
class RtcExtraInfoRtcEngineConfig extends Message {
  @Field(1)
  String rtcAppId;

  @Field(2)
  String rtcUserId;

  @Field(3)
  String rtcToken;
}
//SEGMENT 13-11
// Continuing from the previous conversion

// RtcExtraInfoRtcEngineConfig message continued
@dataclass
class RtcExtraInfoRtcEngineConfig extends Message {
  @Field(1)
  String rtcAppId;

  @Field(2)
  String rtcUserId;

  @Field(3)
  String rtcToken;

  @Field(4)
  int rtcChannelId;
}

// RtcExtraInfoRtcLiveVideoParam message
@dataclass
class RtcExtraInfoRtcLiveVideoParam extends Message {
  @Field(1)
  int strategyId;

  @Field(2)
  RtcExtraInfoRtcVideoParam params;
}

// RtcExtraInfoRtcVideoParam message
@dataclass
class RtcExtraInfoRtcVideoParam extends Message {
  @Field(1)
  int width;

  @Field(2)
  int height;

  @Field(3)
  int fps;

  @Field(4)
  int bitrateKbps;
}

// RtcExtraInfoRtcBitrateMap message
@dataclass
class RtcExtraInfoRtcBitrateMap extends Message {
  @Field(1)
  int xx1;

  @Field(2)
  int xx2;

  @Field(3)
  int xx3;

  @Field(4)
  int xx4;
}

// CreateChannelContent message
@dataclass
class CreateChannelContent extends Message {
  @Field(1)
  Player owner;

  @Field(2)
  String ownerLinkMicId;
}

// ListChangeContent message
@dataclass
class ListChangeContent extends Message {
  @Field(1)
  TextType type;

  @Field(2)
  AllListUser list;
}

// MultiLiveContent message
@dataclass
class MultiLiveContent extends Message {
  @Field(2)
  MultiLiveContentInviteBizContent inviteBizContent;

  @Field(3)
  MultiLiveContentReplyBizContent replyBizContent;

  @Field(4)
  MultiLiveContentPermitBizContent permitBizContent;

  @Field(6)
  MultiLiveContentKickOutBizContent kickOutBizContent;
}

// MultiLiveContentInviteBizContent message
@dataclass
class MultiLiveContentInviteBizContent extends Message {
  @Field(1)
  LinkmicUserSettingInfo anchorSettingInfo;

  @Field(2)
  int inviteSource;

  @Field(3)
  User operatorUserInfo;

  @Field(4)
  int operatorLinkAdminType;

  @Field(5)
  User inviteeUserInfo;
}

// MultiLiveContentReplyBizContent message
@dataclass
class MultiLiveContentReplyBizContent extends Message {
  @Field(1)
  int linkType;
}
//SEGMENT 13-12
// Continuing from the previous conversion

// MultiLiveContentReplyBizContent message
@dataclass
class MultiLiveContentReplyBizContent extends Message {
  @Field(1)
  int linkType;

  @Field(2)
  int isTurnOffInvitation;

  @Field(3)
  User replyUserInfo;
}

// MultiLiveContentPermitBizContent message
@dataclass
class MultiLiveContentPermitBizContent extends Message {
  @Field(1)
  LinkmicUserSettingInfo anchorSettingInfo;

  @Field(2)
  int expireTimestamp;

  @Field(3)
  User operatorUserInfo;

  @Field(4)
  int operatorLinkAdminType;
}

// MultiLiveContentKickOutBizContent message
@dataclass
class MultiLiveContentKickOutBizContent extends Message {
  @Field(1)
  User operatorUserInfo;

  @Field(2)
  int operatorLinkAdminType;

  @Field(3)
  User kickPlayerUserInfo;
}

// InviteContent message
@dataclass
class InviteContent extends Message {
  @Field(1)
  Player invitor;

  @Field(2)
  RtcExtraInfo inviteeRtcExtInfo;

  @Field(3)
  String invitorLinkMicId;

  @Field(4)
  String inviteeLinkMicId;

  @Field(5)
  bool isOwner;

  @Field(6)
  Position pos;

  @Field(7)
  DslConfig dsl;

  @Field(8)
  User invitee;

  @Field(9)
  User operator;
}

// ApplyContent message
@dataclass
class ApplyContent extends Message {
  @Field(1)
  Player applier;

  @Field(2)
  String applierLinkMicId;
}

// PermitApplyContent message
@dataclass
class PermitApplyContent extends Message {
  @Field(1)
  Player permiter;

  @Field(2)
  String permiterLinkMicId;

  @Field(3)
  Position applierPos;

  @Field(4)
  ReplyStatus replyStatus;

  @Field(5)
  DslConfig dsl;

  @Field(6)
  User applier;

  @Field(7)
  User operator;

  @Field(8)
  String applierLinkMicId;
}

// ReplyInviteContent message
@dataclass
class ReplyInviteContent extends Message {
  @Field(1)
  Player invitee;

  @Field(2)
  ReplyStatus replyStatus;

  @Field(3)
  String inviteeLinkMicId;
}
//SEGMENT 13-13
// Continuing from the previous conversion

// ReplyInviteContent message
@dataclass
class ReplyInviteContent extends Message {
  @Field(1)
  Player invitee;

  @Field(2)
  ReplyStatus replyStatus;

  @Field(3)
  String inviteeLinkMicId;

  @Field(4)
  Position inviteePos;

  @Field(5)
  Player inviteOperatorUser;
}

// KickOutContent message
@dataclass
class KickOutContent extends Message {
  @Field(1)
  Player offliner;

  @Field(2)
  KickoutReason kickoutReason;
}

// CancelApplyContent message
@dataclass
class CancelApplyContent extends Message {
  @Field(1)
  Player applier;

  @Field(2)
  String applierLinkMicId;
}

// CancelInviteContent message
@dataclass
class CancelInviteContent extends Message {
  @Field(1)
  Player invitor;

  @Field(2)
  String invitorLinkMicId;

  @Field(3)
  String inviteeLinkMicId;

  @Field(4)
  int inviteSeqId;

  @Field(5)
  Player invitee;
}

// LeaveContent message
@dataclass
class LeaveContent extends Message {
  @Field(1)
  Player leaver;

  @Field(2)
  int leaveReason;
}

// FinishChannelContent message
@dataclass
class FinishChannelContent extends Message {
  @Field(1)
  Player owner;

  @Field(2)
  int finishReason;
}

// JoinDirectContent message
@dataclass
class JoinDirectContent extends Message {
  @Field(1)
  LinkLayerListUser joiner;

  @Field(2)
  AllListUser allUsers;
}

// LeaveJoinGroupContent message
@dataclass
class LeaveJoinGroupContent extends Message {
  @Field(1)
  GroupPlayer operator;

  @Field(2)
  int groupChannelId;

  @Field(3)
  String leaveSource;
}

// PermitJoinGroupContent message
@dataclass
class PermitJoinGroupContent extends Message {
  @Field(1)
  GroupPlayer approver;

  @Field(2)
  AgreeStatus agreeStatus;

  @Field(3)
  TextType type;

  @Field(4)
  List<RtcExtraInfo> groupExtInfoList;

  @Field(5)
  GroupChannelAllUser groupUser;
}

// CancelJoinGroupContent message
@dataclass
class CancelJoinGroupContent extends Message {
  @Field(1)
  List<GroupPlayer> leaverList;

  @Field(2)
  GroupPlayer operator;
}
//SEGMENT 13-14
// Continuing from the previous conversion

// CancelJoinGroupContent message
@dataclass
class CancelJoinGroupContent extends Message {
  @Field(1)
  List<GroupPlayer> leaverList;

  @Field(2)
  GroupPlayer operator;

  @Field(3)
  TextType type;
}

// P2PGroupChangeContent message
@dataclass
class P2PGroupChangeContent extends Message {
  @Field(1)
  List<RtcExtraInfo> groupExtInfoList;

  @Field(2)
  GroupChannelAllUser groupUser;
}

// BusinessContent message
@dataclass
class BusinessContent extends Message {
  @Field(1)
  int overLength;

  @Field(100)
  MultiLiveContent multiLiveContent;

  @Field(200)
  BusinessContentCohostContent cohostContent;
}

// BusinessContentCohostContent message
@dataclass
class BusinessContentCohostContent extends Message {
  @Field(1)
  BusinessContentJoinGroupBizContent joinGroupBizContent;
}

// BusinessContentJoinGroupBizContent message
@dataclass
class BusinessContentJoinGroupBizContent extends Message {
  @Field(1)
  int fromRoomAgeRestricted;

  @Field(2)
  BusinessContentTag fromTag;

  @Field(3)
  BusinessContentPerceptionDialogInfo dialog;

  @Field(4)
  PunishEventInfo punishInfo;

  @Field(101)
  BusinessContentJoinGroupMessageExtra joinGroupMsgExtra;
}

// BusinessContentTag message
@dataclass
class BusinessContentTag extends Message {
  @Field(1)
  int tagType;

  @Field(2)
  String tagValue;

  @Field(3)
  String tagText;
}
//SEGMENT 13-15

